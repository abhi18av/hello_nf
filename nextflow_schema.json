{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/YOUR_PIPELINE/master/nextflow_schema.json",
    "title": "Nextflow pipeline parameters",
    "description": "This pipeline uses Nextflow and processes some kind of data. The JSON Schema was built using the nf-core pipeline schema builder.",
    "type": "object",
    "definitions": {
        "input_output": {
            "title": "Input/output",
            "type": "object",
            "description": "Input output files",
            "default": "",
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Data input type. Can be h5ad, h5 or multih5ad.",
                    "enum": [
                        "h5",
                        "h5ad",
                        "multih5ad"
                    ],
                    "help_text": "Selection of the type of input files for the integration pipeline. \n\n- h5: 10x h5 output files \n- h5ad: per sample h5ad files, i.e. files that have been processed with prior runs of the pipeline.\n- multih5ad: a single h5ad file containing multiple samples. The barcode for the different cells must be of the structure << barcode_tag >>-1-<< sample_id >> conform the scanpy standards. The multisample file will be split to per sample files during processing.\n",
                    "default": "h5"
                },
                "input": {
                    "type": "string",
                    "description": "Comma separated file containing h5 files in S3.",
                    "help_text": "Path to the input files in S3.\n\n__Note:__\nThe sample names are derived from the files. For h5 files the sample name will be derived from the file path as `./<<sample_name>>/cellranger/raw_feature_bc_matrix.h5`. For the h5ad the sample name will be the name of the h5ad file, i.e. `<<sample_name>>.h5ad>>`. For the multih5ad the sample names will be derived from the cell barcodes.\n\nPlease note that multiple paths to files can be supplied and that wildcards are possible. \nFor example\n\n- wildcards\n```\ns3://itx-aiv-scdata/test10x/test10x/processed_data/*/cellranger/raw_feature_bc_matrix.h5\n```\n\n- comma-separated values\n```\ns3://itx-aiv-scdata/test10x/test10x/processed_data/10xtest-1/cellranger/raw_feature_bc_matrix.h5,s3://itx-aiv-scdata/test10x/test10x/processed_data/10xtest-2/cellranger/raw_feature_bc_matrix.h5\n```"
                },
                "output": {
                    "type": "string",
                    "description": "S3 location to output the integrated data to.",
                    "help_text": "Output location for the resulting pipeline output files."
                },
                "publishPrefix": {
                    "type": "string",
                    "description": "Prefix that will be added to the integrated datasets.",
                    "help_text": "The prefix that will be added to the output integration file of the pipeline.\n\nE.g.\n```\nCS000110-436-integration\n```"
                },
                "to": {
                    "type": "string",
                    "description": "File formats to export the data. Default always exports to h5ad, additional options include seurat and obs_csv.",
                    "help_text": "The pipeline will by default always output a h5ad file containing the integrated data. \n\nIn addition to this h5ad a seurat object can be generated by specifying the `seurat`option.",
                    "enum": [
                        "seurat"
                    ]
                }
            },
            "required": [
                "from",
                "input",
                "output",
                "publishPrefix"
            ]
        },
        "annotations": {
            "title": "Annotations",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "meta": {
                    "type": "string",
                    "description": "Metadata tsv containing the sample metadata that will be added to the cells.",
                    "help_text": "Optional sample metadata that will be added to the cell annotations. This data requires the `SampleName` to be set on which the match for the sample will be made."
                },
                "ctReference": {
                    "type": "string",
                    "description": "Cell type reference for label transfer using SingleR.",
                    "help_text": "Reference h5ad file containing annotated celltypes and corresponding GEX data."
                },
                "singlercustomref__annotatedH5ADAnnotationField": {
                    "type": "string",
                    "description": "Automated celltype annotation field.",
                    "default": "celltype_singler",
                    "help_text": "Annotation field on the reference dataset that contains the celltype."
                },
                "gmt": {
                    "type": "string",
                    "description": "Gene sets to use for genescoring.",
                    "hidden": true
                }
            }
        },
        "filter_settings": {
            "title": "Filter settings",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "qcmetrics__minUMICount": {
                    "type": "integer",
                    "description": "Minimum number of UMI counts for a cell",
                    "default": "2000"
                },
                "qcmetrics__minGeneCount": {
                    "type": "integer",
                    "description": "Minimum number of genes for a cell.",
                    "default": "200"
                },
                "qcmetrics__maxFractionMito": {
                    "type": "number",
                    "default": 0.2,
                    "description": "Maximum fraction mitochondrial UMI counts.",
                    "help_text": "Defines the maximum fraction of mitochondrial reads per cell. \n\nFor standard PBMC samples a value of 0.2 is suggested."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output"
        },
        {
            "$ref": "#/definitions/annotations"
        },
        {
            "$ref": "#/definitions/filter_settings"
        }
    ]
}
